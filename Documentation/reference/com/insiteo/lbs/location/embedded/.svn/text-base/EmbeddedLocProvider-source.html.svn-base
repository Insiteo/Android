<!DOCTYPE html>

















































<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <meta name="description" content="Javadoc API documentation for Insiteo API Documentation - Version 3.2." />

<link rel="shortcut icon" type="image/x-icon" href="../../../../../favicon.ico" />
<title>

  EmbeddedLocProvider


| Insiteo API Documentation - Version 3.2

</title>
<link href="../../../../../../assets/doclava-developer-docs.css" rel="stylesheet" type="text/css" />
<link href="../../../../../../assets/customizations.css" rel="stylesheet" type="text/css" />
<script src="../../../../../../assets/search_autocomplete.js" type="text/javascript"></script>
<script src="../../../../../../assets/jquery-resizable.min.js" type="text/javascript"></script>
<script src="../../../../../../assets/doclava-developer-docs.js" type="text/javascript"></script>
<script src="../../../../../../assets/prettify.js" type="text/javascript"></script>
<script type="text/javascript">
  setToRoot("../../../../../", "../../../../../../assets/");
</script>
<script src="../../../../../../assets/doclava-developer-reference.js" type="text/javascript"></script>
<script src="../../../../../../assets/navtree_data.js" type="text/javascript"></script>
<script src="../../../../../../assets/customizations.js" type="text/javascript"></script>
<noscript>
  <style type="text/css">
    html,body{overflow:auto;}
    #body-content{position:relative; top:0;}
    #doc-content{overflow:visible;border-left:3px solid #666;}
    #side-nav{padding:0;}
    #side-nav .toggle-list ul {display:block;}
    #resize-packages-nav{border-bottom:3px solid #666;}
  </style>
</noscript>
</head>

<body class="">

<div id="header">
    <div id="headerLeft">
    
      <span id="masthead-title">Insiteo API Documentation - Version 3.2</span>
    
    </div>
    <div id="headerRight">
      
  <div id="search" >
      <div id="searchForm">
          <form accept-charset="utf-8" class="gsc-search-box" 
                onsubmit="return submit_search()">
            <table class="gsc-search-box" cellpadding="0" cellspacing="0"><tbody>
                <tr>
                  <td class="gsc-input">
                    <input id="search_autocomplete" class="gsc-input" type="text" size="33" autocomplete="off"
                      title="search developer docs" name="q"
                      value="search developer docs"
                      onFocus="search_focus_changed(this, true)"
                      onBlur="search_focus_changed(this, false)"
                      onkeydown="return search_changed(event, true, '../../../../../')"
                      onkeyup="return search_changed(event, false, '../../../../../')" />
                  <div id="search_filtered_div" class="no-display">
                      <table id="search_filtered" cellspacing=0>
                      </table>
                  </div>
                  </td>
                  <td class="gsc-search-button">
                    <input type="submit" value="Search" title="search" id="search-button" class="gsc-search-button" />
                  </td>
                  <td class="gsc-clear-button">
                    <div title="clear results" class="gsc-clear-button">&nbsp;</div>
                  </td>
                </tr></tbody>
              </table>
          </form>
      </div><!-- searchForm -->
  </div><!-- search -->
      
        
  <div id="api-level-toggle">
    <input type="checkbox" id="apiLevelCheckbox" onclick="toggleApiLevelSelector(this)" />
    <label for="apiLevelCheckbox" class="disabled">Filter by API Level: </label>
    <select id="apiLevelSelector">
      <!-- option elements added by buildApiLevelSelector() -->
    </select>
  </div>
  <script>
   var SINCE_DATA = [ 'v1', 'v1' ];
    
    var SINCE_LABELS = [ 'v1', 'v1' ];
    buildApiLevelSelector();
    addLoadEvent(changeApiLevel);
  </script>


      
    </div>
</div><!-- header -->


  <div class="g-section g-tpl-240" id="body-content">
    <div class="g-unit g-first side-nav-resizable" id="side-nav">
      <div id="swapper">
        <div id="nav-panels">
          <div id="resize-packages-nav">
            <div id="packages-nav">
              <div id="index-links">
                <a href="../../../../../packages.html"  >Package Index</a> | 
                <a href="../../../../../classes.html" >Class Index</a>
              </div>
              <ul>
                
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/analytics/package-summary.html">com.insiteo.lbs.analytics</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/analytics/entities/package-summary.html">com.insiteo.lbs.analytics.entities</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/analytics/request/package-summary.html">com.insiteo.lbs.analytics.request</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/package-summary.html">com.insiteo.lbs.common</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/auth/package-summary.html">com.insiteo.lbs.common.auth</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/auth/entities/package-summary.html">com.insiteo.lbs.common.auth.entities</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/auth/parsers/package-summary.html">com.insiteo.lbs.common.auth.parsers</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/init/package-summary.html">com.insiteo.lbs.common.init</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/parser/package-summary.html">com.insiteo.lbs.common.parser</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/utils/geometry/package-summary.html">com.insiteo.lbs.common.utils.geometry</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/common/utils/threading/package-summary.html">com.insiteo.lbs.common.utils.threading</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/geofence/package-summary.html">com.insiteo.lbs.geofence</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/geofence/render/package-summary.html">com.insiteo.lbs.geofence.render</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/itinerary/package-summary.html">com.insiteo.lbs.itinerary</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/itinerary/entities/package-summary.html">com.insiteo.lbs.itinerary.entities</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/location/package-summary.html">com.insiteo.lbs.location</a></li>
    <li class="selected api apilevel-">
  <a href="../../../../../com/insiteo/lbs/location/embedded/package-summary.html">com.insiteo.lbs.location.embedded</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/location/parser/package-summary.html">com.insiteo.lbs.location.parser</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/location/utils/package-summary.html">com.insiteo.lbs.location.utils</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/package-summary.html">com.insiteo.lbs.map</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/database/package-summary.html">com.insiteo.lbs.map.database</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/entities/package-summary.html">com.insiteo.lbs.map.entities</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/gestures/package-summary.html">com.insiteo.lbs.map.gestures</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/render/package-summary.html">com.insiteo.lbs.map.render</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/map/utils/package-summary.html">com.insiteo.lbs.map.utils</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/meetme/package-summary.html">com.insiteo.lbs.meetme</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/meetme/requests/package-summary.html">com.insiteo.lbs.meetme.requests</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/analytics/request/package-summary.html">com.insiteo.lbs.protobuf.analytics.request</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/dispatch/request/auth/package-summary.html">com.insiteo.lbs.protobuf.dispatch.request.auth</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/dispatch/response/package-summary.html">com.insiteo.lbs.protobuf.dispatch.response</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/dispatch/response/auth/package-summary.html">com.insiteo.lbs.protobuf.dispatch.response.auth</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/dispatch/response/init/package-summary.html">com.insiteo.lbs.protobuf.dispatch.response.init</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/request/getloc/package-summary.html">com.insiteo.lbs.protobuf.lbs.request.getloc</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/request/init/package-summary.html">com.insiteo.lbs.protobuf.lbs.request.init</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/request/itinerary/package-summary.html">com.insiteo.lbs.protobuf.lbs.request.itinerary</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/request/meetme/package-summary.html">com.insiteo.lbs.protobuf.lbs.request.meetme</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/request/pushloc/package-summary.html">com.insiteo.lbs.protobuf.lbs.request.pushloc</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/package-summary.html">com.insiteo.lbs.protobuf.lbs.response</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/getloc/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.getloc</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/init/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.init</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/itinerary/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.itinerary</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/loc/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.loc</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/meetme/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.meetme</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/lbs/response/pushloc/package-summary.html">com.insiteo.lbs.protobuf.lbs.response.pushloc</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/model/geofence/package-summary.html">com.insiteo.lbs.protobuf.model.geofence</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/model/itinerary/package-summary.html">com.insiteo.lbs.protobuf.model.itinerary</a></li>
    <li class="api apilevel-">
  <a href="../../../../../com/insiteo/lbs/protobuf/model/map/package-summary.html">com.insiteo.lbs.protobuf.model.map</a></li>
              </ul><br/>
            </div> <!-- end packages -->
          </div> <!-- end resize-packages -->
          <div id="classes-nav">
            <ul>
              
    <li><h2>Interfaces</h2>
      <ul>
          <li class="api apilevel-"><a href="../../../../../com/insiteo/lbs/location/embedded/IEmbeddedLocListener.html">IEmbeddedLocListener</a></li>
      </ul>
    </li>
              
    <li><h2>Classes</h2>
      <ul>
          <li class="api apilevel-"><a href="../../../../../com/insiteo/lbs/location/embedded/EmbbededInitParser.html">EmbbededInitParser</a></li>
          <li class="api apilevel-"><a href="../../../../../com/insiteo/lbs/location/embedded/EmbeddedLocation.html">EmbeddedLocation</a></li>
          <li class="api apilevel-"><a href="../../../../../com/insiteo/lbs/location/embedded/EmbeddedLocJNI.html">EmbeddedLocJNI</a></li>
          <li class="selected api apilevel-"><a href="../../../../../com/insiteo/lbs/location/embedded/EmbeddedLocProvider.html">EmbeddedLocProvider</a></li>
      </ul>
    </li>
              
              
              
              
            </ul><br/>
          </div><!-- end classes -->
        </div><!-- end nav-panels -->
        <div id="nav-tree" style="display:none">
          <div id="index-links">
            <a href="../../../../../packages.html"  >Package Index</a> | 
            <a href="../../../../../classes.html" >Class Index</a>
          </div>
        </div><!-- end nav-tree -->
      </div><!-- end swapper -->
    </div> <!-- end side-nav -->
    <script>
      if (!isMobile) {
        $("<a href='#' id='nav-swap' onclick='swapNav();return false;' style='font-size:10px;line-height:9px;margin-left:1em;text-decoration:none;'><span id='tree-link'>Use Tree Navigation</span><span id='panel-link' style='display:none'>Use Panel Navigation</span></a>").appendTo("#side-nav");
        chooseDefaultNav();
        if ($("#nav-tree").is(':visible')) {
          init_default_navtree("../../../../../");
        } else {
          addLoadEvent(function() {
            scrollIntoView("packages-nav");
            scrollIntoView("classes-nav");
          });
        }
        $("#swapper").css({borderBottom:"2px solid #aaa"});
      } else {
        swapNav(); // tree view should be used on mobile
      }
    </script>



<div class="g-unit" id="doc-content">

<div id="api-info-block">



  
   
  
  
  
  


<div class="sum-details-links">

<div>
<a href="EmbeddedLocProvider.html">View Documentation</a>
</div>


</div><!-- end sum-details-links -->
<div class="api-level">
  

  Since: <a href="../../../../../guide/appendix/api-levels.html#level">API Level </a>


  
  

</div>
</div><!-- end api-info-block -->


<!-- ======== START OF CLASS DATA ======== -->

<div id="jd-header">
    public
     
     
    
    class
<h1>EmbeddedLocProvider</h1>



  
    extends <a href="http://d.android.com/reference/java/lang/Object.html">Object</a><br/>
  
  
  

  
  
  


</div><!-- end header -->
<div id="jd-content">
  <pre class="prettyprint">
package com.insiteo.lbs.location.embedded;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.concurrent.Semaphore;

import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.location.GpsSatellite;
import android.location.Location;
import android.location.LocationManager;
import android.net.wifi.ScanResult;
import android.os.Build;
import android.os.SystemClock;

import com.insiteo.lbs.common.CommonConstants;
import com.insiteo.lbs.common.IDebugListener;
import com.insiteo.lbs.common.init.EPackageType;
import com.insiteo.lbs.common.init.InitProvider;
import com.insiteo.lbs.common.utils.Log;
import com.insiteo.lbs.location.LbsInitData;
import com.insiteo.lbs.location.LocationConstants;
import com.insiteo.lbs.location.scan.BleController.BleScanResult;
import com.insiteo.lbs.location.scan.IBleControllerListener;
import com.insiteo.lbs.location.scan.ICompassControllerListener;
import com.insiteo.lbs.location.scan.IGpsControllerListener;
import com.insiteo.lbs.location.scan.IMotionControllerListener;
import com.insiteo.lbs.location.scan.IWifiControllerListener;

public class EmbeddedLocProvider implements IWifiControllerListener, IGpsControllerListener, ICompassControllerListener, IMotionControllerListener, IBleControllerListener {

	public final static String TAG = "INSITEO_LOCATION_SERVICE_EMBEDDED";

	private final static int TECHNO_WIFI = 0;
	private final static int TECHNO_BLE = 1;

	public static final int TYPE_NO_MOTION = 0;
	public static final int TYPE_SIMPLE_MOTION = 1;
	public static final int TYPE_MOTION_WITH_STEP = 2;

	private IEmbeddedLocListener mListener;
	private boolean[] mAvailableSensors;
	private int mDevicePerfo;

	private boolean mUseOrientation;	//if true, orientation will be send to jni
	private volatile boolean mIsStarted;

	// when using the InsiteoTester we might use the generated loc from the fingerprint
	private String mLocationDirPath = null;
	
	private Semaphore mEmbeddedLock 	= new Semaphore(1);


	public EmbeddedLocProvider(Context aContext, IEmbeddedLocListener locListener) {
		mListener = locListener;
		mIsStarted = false;

		mDevicePerfo = 3;	//TODO : detect real perfo (set to max)    	

		mAvailableSensors = new boolean[] {false, false, false, false, false, false, false};

		//check wifi hardware
		PackageManager pm = aContext.getPackageManager();
		if (pm.hasSystemFeature(PackageManager.FEATURE_WIFI)) {
			mAvailableSensors[0] = true;
		}

		if (pm.hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
			mAvailableSensors[1] = true;
		}

		//check location hardware
		LocationManager locManager = (LocationManager)aContext.getSystemService(Context.LOCATION_SERVICE);
		List&lt;String&gt; availableLocProviders = locManager.getAllProviders();
		for (String provName : availableLocProviders) {
			if (provName.equals(LocationConstants.GPS_PROVIDER_NAME)) {
				mAvailableSensors[2] = true;
			}
		}

		//check motion sensors hardware
		SensorManager sensorManager = (SensorManager)aContext.getSystemService(Context.SENSOR_SERVICE);
		List&lt;Sensor&gt; availableSensors = sensorManager.getSensorList(Sensor.TYPE_ALL);

		//on some phones, TYPE_ROTATION_VECTOR does not exist, thus we have to check TYPE_MAGNETIC_FIELD with TYPE_ACCELEROMETER
		boolean hasMagneticField = false;

		for (Sensor sensor : availableSensors) {
			switch (sensor.getType()) {
			case Sensor.TYPE_ACCELEROMETER:
				mAvailableSensors[3] = true;
				break;

			case Sensor.TYPE_GYROSCOPE:
				mAvailableSensors[4] = true;
				break;

			case Sensor.TYPE_ROTATION_VECTOR:
				mAvailableSensors[5] = true;
				break;

			case Sensor.TYPE_MAGNETIC_FIELD:
				hasMagneticField = true;
				break;

			case Sensor.TYPE_PRESSURE:
				mAvailableSensors[6] = true;
				break;
			}	
		}

		//check that azimuth can be computed even if TYPE_ROTATION_VECTOR doesn't exist
		if (mAvailableSensors[5] == false) {
			mAvailableSensors[5] = hasMagneticField &amp;&amp; mAvailableSensors[3];
		}
	}

	/**
	 * Returns whether the EmbeddedLocation process is started.
	 * @return True if it is started.
	 */
	public boolean isStarted() {
		return mIsStarted;
	}

	/**
	 * Returns an int array containing the priorities that should be used for the location scanning mode
	 * @return
	 */
	public int[] getLocationTechnologiesPriorities(){
		String locationFolder = InitProvider.getInstance().getDataDirPath() + "/" + EPackageType.LOCATION.getDirName();;
		String deviceOS = "Android";
		String deviceManufacturer = android.os.Build.MANUFACTURER;
		String deviceModel = android.os.Build.MODEL;
		int osVersion = android.os.Build.VERSION.SDK_INT;

		int[] result = EmbeddedLocJNI.getLocationTechnoPriorities(locationFolder, deviceOS, deviceManufacturer, deviceModel, osVersion);

		return result;
	}

	/**
	 * Starts the embedded location process.
	 * @param useWifi True if it should use WIFI.
	 * @param useBle True if it should use BLE.
	 * @param useGps True if it should use GPS.
	 * @param motionType The int motion type.
	 * @return
	 */
	public boolean initLoc(boolean useWifi, boolean useBle, boolean useGps, int motionType) {

		Log.d(TAG, "Initializing EmbeddedLocProvider with WIFI = " + useWifi + ", BLE = " + useBle + ", GPS = " + useGps + " and MotionType = " + motionType);

		boolean res = false;
		mIsStarted = false;

		LbsInitData initData = LbsInitData.getInstance();
		initData.reinitialize();

		String locationDataDir = "";
		if (mLocationDirPath != null) {
			locationDataDir = mLocationDirPath;
		} else {
			locationDataDir = InitProvider.getInstance().getDataDirPath() + "/" + EPackageType.LOCATION.getDirName();
		}

		//get phone model and ID, to apply specific corrections on wifi scan if needed
		String terminalsFile = locationDataDir + "/" + LocationConstants.TERMINALS_FILE_NAME;
		int phoneModelID = EmbbededInitParser.getTerminalID(terminalsFile); 

		//update available sensors
		boolean[] availableSensors = new boolean[mAvailableSensors.length];
		System.arraycopy(mAvailableSensors, 0, availableSensors, 0, mAvailableSensors.length);
		availableSensors[0] = mAvailableSensors[0] &amp;&amp; useWifi; // If WIFI is ask and WIFI is available on phone
		availableSensors[1] = mAvailableSensors[1] &amp;&amp; useBle;  // If BLE is ask and BLE is available on phone
		availableSensors[2] = mAvailableSensors[2] &amp;&amp; useGps;  // If GPS is ask and GPS is available on phone

		mUseOrientation = (motionType == TYPE_MOTION_WITH_STEP || motionType == TYPE_SIMPLE_MOTION);

		//init C lib
		Log.d(TAG, "Initializing library phoneModel = " + phoneModelID + ", " + availableSensors.toString());
		int initStatus = -1;
		try {
			mEmbeddedLock.acquire();
			initStatus = EmbeddedLocJNI.init(SystemClock.elapsedRealtime(), mListener, locationDataDir, LocationConstants.DEBUG_MODE, phoneModelID, availableSensors, mDevicePerfo, motionType); 
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			mEmbeddedLock.release();
		}
		Log.d(TAG, "Initialized");

		//check if init succeeded
		if (initStatus != -1) {
			if (initStatus == 0) {
				//fake loc mode
				res = true;
			} else {
				res = true;
				
			}

			if (res) {
				initData.setSessionID(initStatus);
				mIsStarted = true;
			}
		}

		return res;    	
	} 
	
	/**
	 * Stops the location process.
	 */
	public void stop() {		
		try {
			mEmbeddedLock.acquire();
			EmbeddedLocJNI.stop();
			mIsStarted = false;
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			mEmbeddedLock.release();
		}
	}
	
	/**
	 * Release all the objects and the JNI context.
	 */
	public void destroy(){
		// TODO destroy all the object in the java code
		EmbeddedLocJNI.destroy();
		mListener = null;
	}
	
	/**
	 * Changes the used location flags.
	 * @param useWifi True if it should use WIFI scan.
	 * @param useGps True if it should use GPS values.
	 * @param motionType The type of motion used
	 */
	public void changeLocation(boolean useWifi, boolean useGps, int motionType){    	
		if (mIsStarted) {
			boolean[] availableSensors = new boolean[mAvailableSensors.length];
			System.arraycopy(mAvailableSensors, 0, availableSensors, 0, mAvailableSensors.length);
			availableSensors[0] = mAvailableSensors[0] &amp;&amp; useWifi;
			availableSensors[2] = mAvailableSensors[2] &amp;&amp; useGps;

			EmbeddedLocJNI.changeLocConfig(SystemClock.elapsedRealtime(), availableSensors, motionType);   
		}	  	
	}
	
	public void setDefaultMapID(int aMapID, boolean aForceDefaultMap) {
		EmbeddedLocJNI.setDefaultMap(aMapID, aForceDefaultMap);    	
	}

	/**
	 * Defines the path that should be use to compute the location.
	 * This enables to process location from mobile generated location.
	 * @param path The path of the location folder to use.
	 */
	public void usePathForLocation(String path){
		mLocationDirPath = path;
	}


	//******************************************************************************************************************
	// 	Compass callback
	// *****************************************************************************************************************

	@Override
	public void onAzimuthChanged(float aAzimuth, float[] aOrientation, int aAccuracy) {
		if (mIsStarted &amp;&amp; mUseOrientation) {
			EmbeddedLocJNI.setOrientation(SystemClock.elapsedRealtime(), aOrientation, aAccuracy);			
		}
		//notify loc listener
		if (mListener != null) {
			mListener.onAzimuthChanged(aAzimuth);
		}
	}

	@Override
	public void onMagnetismChanged(float[] aMagnetism, int aAccuracy) {
		if (mIsStarted &amp;&amp; mUseOrientation) {
			aMagnetism[0] = 1;
			aMagnetism[1] = 1;
			aMagnetism[2] = 1;
			EmbeddedLocJNI.setMagnetism(aMagnetism, aAccuracy);			
		}
	}

	@Override
	public void onCompassAccuracyTooLow() {
		//notify loc listener
		if (mListener != null) {
			mListener.onCompassAccuracyTooLow();
		}
	}

	//******************************************************************************************************************
	// 	Motion callback
	// *****************************************************************************************************************

	@Override
	public void onAccelerometerChanged(float[] aAcc, int aAccuracy) {
		if (mIsStarted) {
			EmbeddedLocJNI.setAccelerometer(SystemClock.elapsedRealtime(), aAcc, aAccuracy);
		}
	}

	@Override
	public void onGyroscopeChanged(float[] aGyro, int aAccuracy) {
		if (mIsStarted) {
			EmbeddedLocJNI.setGyroscope(SystemClock.elapsedRealtime(), aGyro, aAccuracy);
		}
	}

	@Override
	public void onPressureChanged(float aPressure, int aAccuracy) {
		if (mIsStarted) {
			EmbeddedLocJNI.setBarometer(SystemClock.elapsedRealtime(), aPressure, aAccuracy);
		}
	}

	//******************************************************************************************************************
	// 	GPS callback
	// *****************************************************************************************************************

	@Override
	public void onGpsLocationChanged(Location gpsLocation, Iterable&lt;GpsSatellite&gt; satellites) {
		if (mIsStarted) {
			//prepare gps loc table
			if (gpsLocation != null) {
				double [] gpsPosInfos = new double[5];
				gpsPosInfos[0] = gpsLocation.getLatitude();
				gpsPosInfos[1] = gpsLocation.getLongitude();
				gpsPosInfos[2] = gpsLocation.getAccuracy();
				gpsPosInfos[3] = gpsLocation.getSpeed();
				gpsPosInfos[4] = System.currentTimeMillis() - gpsLocation.getTime();

				int gpsSatCount = 0;
				double [] gpsSatAzimuths = null;
				double [] gpsSatElevations = null;
				int [] gpsSatSNR = null;
				int [] gpsSatUsed = null;

				//prepare gps tables
				if (satellites != null) {
					//count satellites
					for (@SuppressWarnings("unused") GpsSatellite sat : satellites) {
						gpsSatCount++;
					}

					//init tables
					gpsSatAzimuths = new double[gpsSatCount];
					gpsSatElevations = new double[gpsSatCount];
					gpsSatSNR = new int[gpsSatCount];
					gpsSatUsed = new int[gpsSatCount];

					//fill tables
					int i = 0;
					for (GpsSatellite sat : satellites) {
						gpsSatAzimuths[i] = sat.getAzimuth();
						gpsSatElevations[i] = sat.getElevation();
						gpsSatSNR[i] = Math.round(sat.getSnr());
						gpsSatUsed[i] = sat.usedInFix() ? 1 : 0;
						i++;
					}
				}

				EmbeddedLocJNI.setGps(SystemClock.elapsedRealtime(), gpsPosInfos, gpsSatCount, gpsSatAzimuths, gpsSatElevations, gpsSatSNR, gpsSatSNR);
			}
		}
	}

	//******************************************************************************************************************
	// 	WIFI callback
	// *****************************************************************************************************************

	@Override
	public void onScanComplete(List&lt;ScanResult&gt; scanResults) {
		Log.d(TAG, " WIFI scan completed");
		if (mIsStarted) {

			int 		apCount 		= scanResults.size();
			String[] 	apSsids 		= new String[apCount];
			int[] 		apFrequencies 	= new int[apCount]; // in MHz
			long[] 		apTimestamps 	= new long[apCount]; // Time Synchronization Function (tsf) timestamp in microseconds when this result was last seen.
			int[] 		apLevels 		= new int[apCount]; // in dBm

			for (int i = 0; i &lt; apCount; i ++) {
				String t = scanResults.get(i).BSSID.toUpperCase();
				try {
					apSsids[i] = new String(t.getBytes(), "UTF-8");
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
				apFrequencies[i] = scanResults.get(i).frequency;
				apTimestamps[i] = /*(Build.VERSION.SDK_INT &gt; 16) ? scanResults.get(i).timestamp : */System.currentTimeMillis();
				apLevels[i] = scanResults.get(i).level;
				Log.d(TAG, "Adding RSSI Data : " + apSsids[i]);
			}

			EmbeddedLocJNI.setRssi(SystemClock.elapsedRealtime(), apCount, TECHNO_WIFI, apSsids, apFrequencies, apTimestamps, apLevels);
			
			IDebugListener debugListener = InitProvider.getInstance().getDebugListener();
			if(debugListener != null) {
				debugListener.onWifiAPsSeen(scanResults);
			}
		}
	}

	@Override
	public void onWifiActivated(boolean success) {
	}

	@Override
	public void onWifiActivationRequired() {
		if (mListener != null) {
			mListener.onWifiActivationRequired();
		}
	}

	//******************************************************************************************************************
	// 	BLE callback
	// *****************************************************************************************************************

	@Override
	public void onBleScanComplete(List&lt;BleScanResult&gt; scanResults) {
		Log.d(TAG, " Ble scan completed");
		if (mIsStarted) {

			int 		apCount 		= scanResults.size();
			String[] 	apSsids 		= new String[apCount];
			int[] 		apFrequencies 	= new int[apCount]; // in MHz
			long[] 		apTimestamps 	= new long[apCount]; // Time Synchronization Function (tsf) timestamp in microseconds when this result was seen.
			int[] 		apLevels 		= new int[apCount]; // in dBm

			for (int i = 0; i &lt; apCount; i ++) {
				apSsids[i] = scanResults.get(i).ssid + "";
				apFrequencies[i] = CommonConstants.NULL_ID; // Frequency is not available for BLE AP
				apTimestamps[i] = scanResults.get(i).timestamp;
				apLevels[i] = scanResults.get(i).rssi;
			}
			EmbeddedLocJNI.setRssi(SystemClock.elapsedRealtime(), apCount, TECHNO_BLE, apSsids, apFrequencies, apTimestamps, apLevels);
			
			IDebugListener debugListener = InitProvider.getInstance().getDebugListener();
			if(debugListener != null) {
				debugListener.onBleAPsSeen(scanResults);
			}
		}
	}

	@Override
	public void onBleActivated(boolean success) {
	}

	@Override
	public void onBleActivationRequired() {
		if (mListener != null) {
			mListener.onBleActivationRequired();
		}
	}







}

  </pre>
</div>
<div id="footer">
Generated by <a href="http://code.google.com/p/doclava/">Doclava</a>.
</div> <!-- end footer -->

</div> <!-- jd-content -->

</div><!-- end doc-content -->

</div> <!-- end body-content --> 

<script type="text/javascript">
init(); /* initialize doclava-developer-docs.js */
</script>

</body>
</html>
